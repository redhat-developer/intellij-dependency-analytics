// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: dockerfile.flex

package org.jboss.tools.intellij.image.build.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.jboss.tools.intellij.image.build.psi.DockerfileTypes;
import com.intellij.psi.TokenType;


class DockerfileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\17\u0200\1\u0500"+
    "\247\u0200\10\u0600\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\0\1\6\1\7\1\10\10\0\1\11\1\12\1\13"+
    "\1\14\2\15\1\16\1\17\1\15\1\20\1\21\1\22"+
    "\1\23\1\24\2\0\1\25\3\0\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\35\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\35\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\35\1\0"+
    "\1\55\2\0\1\35\1\0\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\35\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\35\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\35\1\56\1\0"+
    "\1\57\7\0\1\3\32\0\1\60\217\0\2\61\115\0"+
    "\1\62\u0200\0\1\60\177\0\13\60\35\0\2\3\5\0"+
    "\1\60\57\0\1\60\240\0\1\60\377\0\u0100\63";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1792];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\1\1\5\1\6"+
    "\3\1\1\7\1\10\12\1\1\11\1\12\1\0\1\13"+
    "\1\0\4\14\1\15\3\16\1\17\7\16\1\0\4\16"+
    "\1\14\1\15\1\20\1\21\1\22\2\16\1\23\4\16"+
    "\1\0\1\24\3\16\1\14\1\25\2\16\1\26\2\16"+
    "\1\0\1\27\2\16\1\14\2\16\1\30\1\16\1\0"+
    "\2\16\1\14\1\16\1\31\1\14\1\0\1\32\1\16"+
    "\1\14\1\16\4\14\4\0\1\33\1\14\1\16\5\14"+
    "\5\0\1\14\1\16\1\34\4\14\1\0\1\34\3\0"+
    "\1\35\1\36\4\14\4\0\2\14\2\0\1\14\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\64\0\64\0\234\0\320\0\u0104"+
    "\0\64\0\u0138\0\u016c\0\u01a0\0\64\0\64\0\u01d4\0\u0208"+
    "\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8"+
    "\0\64\0\64\0\320\0\64\0\u03dc\0\u0410\0\u016c\0\u0444"+
    "\0\u0478\0\u01a0\0\u0208\0\u04ac\0\u04e0\0\u0208\0\u0514\0\u0548"+
    "\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8"+
    "\0\u071c\0\u0750\0\u0784\0\u0444\0\u0208\0\u0208\0\u0208\0\u07b8"+
    "\0\u07ec\0\u0208\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0208"+
    "\0\u0924\0\u0958\0\u098c\0\u09c0\0\u0208\0\u09f4\0\u0a28\0\u0208"+
    "\0\u0a5c\0\u0a90\0\u0ac4\0\u0208\0\u0af8\0\u0b2c\0\u0b60\0\u0b94"+
    "\0\u0bc8\0\u0208\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00"+
    "\0\u0208\0\u0d34\0\u0d68\0\u0208\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38"+
    "\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0208"+
    "\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144"+
    "\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u016c\0\u12b0"+
    "\0\u12e4\0\u1318\0\u134c\0\u1380\0\64\0\u13b4\0\u13e8\0\u141c"+
    "\0\u016c\0\u0208\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554"+
    "\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\7\1\10"+
    "\1\11\1\12\2\13\10\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\20\1\22\1\23\4\20\1\24\4\20\1\25"+
    "\2\20\1\26\1\27\1\30\2\20\1\2\1\31\1\32"+
    "\1\5\3\2\65\0\1\3\2\0\1\3\61\0\1\4"+
    "\61\0\6\33\1\34\46\33\1\35\6\33\2\10\1\0"+
    "\2\10\1\0\56\10\11\0\1\36\12\37\2\0\27\37"+
    "\20\0\13\37\2\0\27\37\20\0\1\40\1\41\1\37"+
    "\10\42\2\0\27\37\20\0\2\43\1\37\10\43\2\0"+
    "\3\43\1\44\13\43\1\45\1\46\6\43\20\0\2\43"+
    "\1\37\10\43\2\0\27\43\20\0\2\43\1\37\10\43"+
    "\2\0\13\43\1\47\1\43\1\50\11\43\20\0\2\43"+
    "\1\37\10\43\2\0\14\43\1\51\10\43\1\52\1\43"+
    "\20\0\2\43\1\37\10\43\2\0\17\43\1\53\7\43"+
    "\20\0\2\43\1\37\10\43\2\0\1\54\7\43\1\55"+
    "\16\43\4\0\1\56\13\0\2\43\1\37\10\43\2\0"+
    "\22\43\1\57\4\43\20\0\2\43\1\37\10\43\2\0"+
    "\20\43\1\60\6\43\20\0\2\43\1\37\10\43\2\0"+
    "\15\43\1\61\11\43\20\0\2\43\1\37\10\43\2\0"+
    "\15\43\1\62\11\43\7\0\2\33\4\0\55\33\12\0"+
    "\13\37\2\0\16\37\1\63\10\37\20\0\2\64\1\37"+
    "\10\64\2\0\27\64\20\0\3\37\10\42\2\0\27\37"+
    "\20\0\2\43\1\37\10\43\2\0\3\43\1\65\23\43"+
    "\20\0\2\43\1\37\10\43\2\0\6\43\1\66\20\43"+
    "\20\0\2\43\1\37\10\43\2\0\3\43\1\67\23\43"+
    "\20\0\2\43\1\37\10\43\2\0\16\43\1\70\10\43"+
    "\20\0\2\43\1\37\10\43\2\0\21\43\1\71\1\43"+
    "\1\72\3\43\20\0\2\43\1\37\10\43\2\0\16\43"+
    "\1\73\10\43\20\0\2\43\1\37\10\43\2\0\15\43"+
    "\1\74\11\43\20\0\2\43\1\37\10\43\2\0\1\43"+
    "\1\75\25\43\20\0\2\43\1\37\10\43\2\0\14\43"+
    "\1\76\12\43\51\0\1\77\32\0\2\43\1\37\10\43"+
    "\2\0\14\43\1\100\12\43\20\0\2\43\1\37\10\43"+
    "\2\0\4\43\1\101\22\43\20\0\2\43\1\37\10\43"+
    "\2\0\12\43\1\102\14\43\20\0\2\43\1\37\10\43"+
    "\2\0\17\43\1\103\7\43\20\0\13\37\2\0\12\37"+
    "\1\104\14\37\20\0\2\43\1\37\10\43\2\0\26\43"+
    "\1\105\20\0\2\43\1\37\10\43\2\0\17\43\1\106"+
    "\7\43\20\0\2\43\1\37\10\43\2\0\15\43\1\107"+
    "\11\43\20\0\2\43\1\37\10\43\2\0\13\43\1\110"+
    "\13\43\20\0\2\43\1\37\10\43\2\0\4\43\1\111"+
    "\22\43\20\0\2\43\1\37\10\43\2\0\22\43\1\112"+
    "\4\43\57\0\1\113\24\0\2\43\1\37\10\43\2\0"+
    "\17\43\1\114\7\43\20\0\2\43\1\37\10\43\2\0"+
    "\22\43\1\115\4\43\20\0\2\43\1\37\10\43\2\0"+
    "\11\43\1\116\15\43\20\0\13\37\2\0\1\117\26\37"+
    "\20\0\2\43\1\37\10\43\2\0\26\43\1\120\20\0"+
    "\2\43\1\37\10\43\2\0\20\43\1\121\6\43\20\0"+
    "\2\43\1\37\10\43\2\0\12\43\1\122\14\43\20\0"+
    "\2\43\1\37\10\43\2\0\25\43\1\123\1\43\62\0"+
    "\1\124\21\0\2\43\1\37\10\43\2\0\13\43\1\125"+
    "\13\43\20\0\2\43\1\37\10\43\2\0\3\43\1\126"+
    "\23\43\20\0\13\37\2\0\21\37\1\127\5\37\20\0"+
    "\2\43\1\37\10\43\2\0\16\43\1\130\10\43\20\0"+
    "\2\43\1\37\10\43\2\0\4\43\1\131\22\43\20\0"+
    "\2\43\1\132\10\43\2\0\27\43\22\0\1\133\61\0"+
    "\2\43\1\37\10\43\2\0\4\43\1\134\22\43\20\0"+
    "\2\43\1\37\10\43\2\0\10\43\1\135\16\43\20\0"+
    "\13\37\2\0\5\37\1\136\21\37\20\0\2\43\1\37"+
    "\10\43\2\0\15\43\1\137\11\43\20\0\5\37\1\140"+
    "\5\37\2\0\1\141\15\37\1\142\1\37\1\143\6\37"+
    "\5\0\1\144\17\0\1\145\7\0\1\146\15\0\1\147"+
    "\1\0\1\144\13\0\1\144\12\0\2\43\1\37\10\43"+
    "\2\0\17\43\1\150\7\43\20\0\13\37\2\0\15\37"+
    "\1\151\11\37\20\0\2\43\1\37\10\43\2\0\10\43"+
    "\1\152\16\43\20\0\11\37\1\153\1\37\2\0\27\37"+
    "\20\0\13\37\2\0\13\37\1\154\3\37\1\155\7\37"+
    "\20\0\13\37\2\0\16\37\1\156\10\37\20\0\5\37"+
    "\1\157\5\37\2\0\27\37\25\0\1\160\67\0\1\161"+
    "\102\0\1\162\3\0\1\163\62\0\1\164\30\0\13\37"+
    "\2\0\17\37\1\165\7\37\20\0\2\43\1\37\10\43"+
    "\2\0\14\43\1\166\12\43\20\0\7\37\1\167\3\37"+
    "\2\0\27\37\20\0\13\37\2\0\3\37\1\170\23\37"+
    "\20\0\13\37\2\0\13\37\1\171\13\37\20\0\13\37"+
    "\2\0\2\37\1\172\24\37\20\0\12\37\1\173\2\0"+
    "\27\37\32\0\1\174\60\0\1\175\74\0\1\176\73\0"+
    "\1\177\52\0\1\200\44\0\13\37\2\0\13\37\1\201"+
    "\13\37\20\0\2\43\1\37\10\43\2\0\21\43\1\202"+
    "\5\43\20\0\7\37\1\203\3\37\2\0\27\37\20\0"+
    "\2\37\1\204\4\37\1\203\3\37\2\0\27\37\20\0"+
    "\7\37\1\205\3\37\2\0\27\37\20\0\3\37\1\206"+
    "\7\37\2\0\27\37\23\0\1\207\67\0\1\210\56\0"+
    "\1\211\4\0\1\210\63\0\1\212\54\0\6\37\1\167"+
    "\4\37\2\0\27\37\20\0\13\37\2\0\23\37\1\213"+
    "\3\37\20\0\6\37\1\214\4\37\2\0\27\37\20\0"+
    "\13\37\2\0\25\37\1\167\1\37\62\0\1\175\27\0"+
    "\1\175\115\0\1\215\31\0\1\216\55\0\7\37\2\167"+
    "\2\37\2\0\27\37\20\0\13\37\2\0\12\37\1\217"+
    "\14\37\27\0\2\175\102\0\1\220\34\0\13\37\2\0"+
    "\4\37\1\167\22\37\41\0\1\175\31\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5928];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\3\1\1\11\3\1\2\11"+
    "\12\1\2\11\1\0\1\11\1\0\20\1\1\0\20\1"+
    "\1\0\13\1\1\0\10\1\1\0\6\1\1\0\10\1"+
    "\4\0\10\1\5\0\7\1\1\0\1\11\3\0\6\1"+
    "\4\0\2\1\2\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public DockerfileLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  DockerfileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return DockerfileTypes.ANY_CHAR;
            }
          // fall through
          case 31: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 32: break;
          case 3:
            { return DockerfileTypes.NEWLINE;
            }
          // fall through
          case 33: break;
          case 4:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 34: break;
          case 5:
            { return DockerfileTypes.COMMENT;
            }
          // fall through
          case 35: break;
          case 6:
            { return DockerfileTypes.DOLLAR;
            }
          // fall through
          case 36: break;
          case 7:
            { return DockerfileTypes.COLON;
            }
          // fall through
          case 37: break;
          case 8:
            { return DockerfileTypes.EQUALS;
            }
          // fall through
          case 38: break;
          case 9:
            { return DockerfileTypes.LBRACE;
            }
          // fall through
          case 39: break;
          case 10:
            { return DockerfileTypes.RBRACE;
            }
          // fall through
          case 40: break;
          case 11:
            { return DockerfileTypes.STRING;
            }
          // fall through
          case 41: break;
          case 12:
            { return DockerfileTypes.IMAGE_NAME_TOKEN;
            }
          // fall through
          case 42: break;
          case 13:
            { return DockerfileTypes.VERSION;
            }
          // fall through
          case 43: break;
          case 14:
            { return DockerfileTypes.IDENTIFIER;
            }
          // fall through
          case 44: break;
          case 15:
            { return DockerfileTypes.AS;
            }
          // fall through
          case 45: break;
          case 16:
            { return DockerfileTypes.ADD;
            }
          // fall through
          case 46: break;
          case 17:
            { return DockerfileTypes.ARG;
            }
          // fall through
          case 47: break;
          case 18:
            { return DockerfileTypes.CMD;
            }
          // fall through
          case 48: break;
          case 19:
            { return DockerfileTypes.ENV;
            }
          // fall through
          case 49: break;
          case 20:
            { return DockerfileTypes.RUN;
            }
          // fall through
          case 50: break;
          case 21:
            { return DockerfileTypes.COPY;
            }
          // fall through
          case 51: break;
          case 22:
            { return DockerfileTypes.FROM;
            }
          // fall through
          case 52: break;
          case 23:
            { return DockerfileTypes.USER;
            }
          // fall through
          case 53: break;
          case 24:
            { return DockerfileTypes.LABEL;
            }
          // fall through
          case 54: break;
          case 25:
            { return DockerfileTypes.EXPOSE;
            }
          // fall through
          case 55: break;
          case 26:
            { return DockerfileTypes.VOLUME;
            }
          // fall through
          case 56: break;
          case 27:
            { return DockerfileTypes.WORKDIR;
            }
          // fall through
          case 57: break;
          case 28:
            { return DockerfileTypes.PLATFORM;
            }
          // fall through
          case 58: break;
          case 29:
            { return DockerfileTypes.PLATFORM_FLAG;
            }
          // fall through
          case 59: break;
          case 30:
            { return DockerfileTypes.ENTRYPOINT;
            }
          // fall through
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
