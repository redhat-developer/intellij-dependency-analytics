// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: buildGradle.flex

package org.jboss.tools.intellij.componentanalysis.gradle.build.lexer;

import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static org.jboss.tools.intellij.componentanalysis.gradle.build.psi.BuildGradleTypes.*;


public class BuildGradleLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_DEPENDENCY = 2;
  public static final int HANDLE_DEPENDENCIES = 4;
  public static final int MAP_DEPENDENCY = 6;
  public static final int HANDLE_GROUP = 8;
  public static final int HANDLE_ARTIFACT = 10;
  public static final int HANDLE_VERSION = 12;
  public static final int EXTRACT_GROUP_STRING = 14;
  public static final int EXTRACT_ARTIFACT_STRING = 16;
  public static final int EXTRACT_VERSION_STRING = 18;
  public static final int GET_ROOT_VALUES = 20;
  public static final int GET_GENERIC_VALUES = 22;
  public static final int BYPASS_UNNECESSARY_BLOCK = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\0"+
    "\1\4\4\0\1\5\1\6\1\7\2\0\1\10\1\11"+
    "\1\12\1\13\12\14\1\15\2\0\1\16\3\0\2\11"+
    "\1\17\2\11\1\20\2\11\1\21\5\11\1\22\1\23"+
    "\1\11\1\24\1\25\1\26\1\27\1\30\3\11\1\31"+
    "\1\32\1\33\1\34\1\0\1\35\1\0\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\11\1\56"+
    "\1\57\1\60\1\61\1\62\1\11\1\63\1\64\1\11"+
    "\1\65\1\66\1\67\7\0\1\3\32\0\1\1\u01df\0"+
    "\1\1\177\0\13\1\35\0\2\3\5\0\1\1\57\0"+
    "\1\1\240\0\1\1\377\0\u0100\70";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\1\2\1\3\1\4\1\5\14\1\1\6"+
    "\1\7\1\10\1\2\1\11\1\12\1\13\1\14\2\10"+
    "\1\15\1\2\1\16\6\0\1\17\1\20\5\10\1\2"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\1"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\0\1\42\22\0\1\43\1\44\7\0"+
    "\1\45\6\0\1\46\21\0\1\47\1\50\10\0\1\51"+
    "\1\52\5\0\1\53\1\0\1\54\23\0\1\52\4\0"+
    "\1\55\24\0\1\56\1\0\3\52\3\0\1\57\4\0"+
    "\1\60\13\0\1\61\3\0\1\62\23\0\1\63\1\64"+
    "\1\50\22\0\2\65\5\0\1\66\4\0\1\67\5\0"+
    "\1\70\15\0\1\71\5\0\1\72\7\0\1\73\1\74"+
    "\11\0\1\75\1\76\16\0\1\77\5\0\1\100\11\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u02e5"+
    "\0\u0357\0\u02e5\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u02e5\0\u02e5"+
    "\0\u02e5\0\u063c\0\u02e5\0\u02e5\0\u02e5\0\u02e5\0\u0675\0\u06ae"+
    "\0\u02e5\0\u06e7\0\u02e5\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804"+
    "\0\u083d\0\u02e5\0\u02e5\0\u0876\0\u0357\0\u08af\0\u08e8\0\u0921"+
    "\0\u095a\0\u02e5\0\u02e5\0\u02e5\0\u0993\0\u09cc\0\u02e5\0\u02e5"+
    "\0\u0a05\0\u02e5\0\u02e5\0\u02e5\0\u02e5\0\u0a3e\0\u02e5\0\u0a77"+
    "\0\u02e5\0\u02e5\0\u02e5\0\u0ab0\0\u02e5\0\u0ae9\0\u0b22\0\u0b5b"+
    "\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23"+
    "\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0675\0\u02e5"+
    "\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u0876"+
    "\0\u02e5\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u0a05\0\u115e"+
    "\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326"+
    "\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee"+
    "\0\u1527\0\u1560\0\u02e5\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d"+
    "\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845"+
    "\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u02e5\0\u1962\0\u199b\0\u19d4"+
    "\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c"+
    "\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64"+
    "\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u02e5\0\u1eba\0\u1ef3"+
    "\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb"+
    "\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283"+
    "\0\u22bc\0\u22f5\0\u02e5\0\u232e\0\u2367\0\u23a0\0\u1d64\0\u23d9"+
    "\0\u2412\0\u244b\0\u02e5\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u02e5"+
    "\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7"+
    "\0\u2730\0\u2769\0\u27a2\0\u02e5\0\u27db\0\u2814\0\u284d\0\u02e5"+
    "\0\u2886\0\u2367\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc"+
    "\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4"+
    "\0\u2bdd\0\u2c16\0\u2c4f\0\u02e5\0\u02e5\0\u2c88\0\u2cc1\0\u2cfa"+
    "\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2"+
    "\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u308a"+
    "\0\u20f4\0\u02e5\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u31a7\0\u02e5"+
    "\0\u31e0\0\u3219\0\u3252\0\u328b\0\u02e5\0\u32c4\0\u32fd\0\u3336"+
    "\0\u336f\0\u33a8\0\u02e5\0\u33e1\0\u341a\0\u3453\0\u348c\0\u34c5"+
    "\0\u34fe\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u361b\0\u3654\0\u368d"+
    "\0\u02e5\0\u36c6\0\u36ff\0\u3738\0\u3771\0\u37aa\0\u02e5\0\u37e3"+
    "\0\u381c\0\u3855\0\u388e\0\u38c7\0\u3900\0\u3939\0\u02e5\0\u02e5"+
    "\0\u3972\0\u39ab\0\u39e4\0\u3a1d\0\u3a56\0\u3a8f\0\u3ac8\0\u2c88"+
    "\0\u3b01\0\u02e5\0\u02e5\0\u3b3a\0\u3b73\0\u3bac\0\u3be5\0\u3c1e"+
    "\0\u3c57\0\u3c90\0\u3cc9\0\u3d02\0\u3d3b\0\u3d74\0\u3dad\0\u3de6"+
    "\0\u3e1f\0\u02e5\0\u3e58\0\u3e91\0\u3eca\0\u3f03\0\u3f3c\0\u3f75"+
    "\0\u3fae\0\u3fe7\0\u4020\0\u4059\0\u4092\0\u40cb\0\u4104\0\u413d"+
    "\0\u4176";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\1\17\1\20\1\17\27\16\1\21\1\22\1\16"+
    "\1\23\2\16\1\24\1\25\1\16\1\26\1\16\1\27"+
    "\1\30\2\16\1\31\2\16\1\32\1\33\1\34\1\35"+
    "\1\16\1\36\2\16\1\37\1\20\1\40\1\16\1\41"+
    "\1\42\1\43\1\42\2\44\1\45\1\46\1\47\2\41"+
    "\1\50\16\41\1\51\1\41\1\22\31\41\1\43\2\41"+
    "\1\0\1\52\1\20\1\52\2\53\30\0\1\54\1\0"+
    "\1\55\3\0\1\56\1\0\1\57\7\0\1\60\1\0"+
    "\1\61\4\0\1\62\1\20\1\63\1\0\1\41\1\17"+
    "\1\43\1\17\2\41\1\45\1\46\1\64\2\41\1\50"+
    "\16\41\1\51\1\65\1\22\7\41\1\66\6\41\1\67"+
    "\6\41\1\70\3\41\1\43\2\41\1\16\1\71\1\16"+
    "\1\71\1\72\1\73\2\16\1\74\2\75\1\16\1\75"+
    "\2\16\13\75\1\16\1\21\1\16\30\75\5\16\1\71"+
    "\1\16\1\71\1\72\1\73\2\16\1\74\2\76\1\16"+
    "\1\76\2\16\13\76\1\16\1\21\1\16\30\76\5\16"+
    "\1\71\1\16\1\71\1\77\1\100\6\16\1\101\16\16"+
    "\1\21\36\16\1\71\1\16\1\71\5\16\2\75\1\16"+
    "\1\75\1\102\1\16\13\75\1\16\1\21\1\16\30\75"+
    "\5\16\1\71\1\16\1\71\5\16\2\76\1\16\1\76"+
    "\1\103\1\16\13\76\1\16\1\21\1\16\30\76\5\16"+
    "\1\71\1\16\1\71\1\104\1\105\6\16\1\101\16\16"+
    "\1\21\35\16\1\0\1\52\1\0\1\52\1\0\1\106"+
    "\3\0\2\106\1\0\1\106\1\0\1\107\13\106\3\0"+
    "\30\106\5\0\1\52\1\0\1\52\1\0\1\110\3\0"+
    "\2\110\1\0\1\110\1\0\1\107\13\110\3\0\30\110"+
    "\4\0\2\111\1\20\62\111\1\112\1\20\1\113\1\111"+
    "\72\0\1\17\1\0\1\17\7\0\1\114\57\0\1\115"+
    "\63\0\1\115\57\0\1\116\55\0\1\117\111\0\1\120"+
    "\63\0\1\121\65\0\1\122\53\0\1\123\12\0\1\124"+
    "\55\0\1\125\103\0\1\126\7\0\1\127\51\0\1\130"+
    "\16\0\1\131\63\0\1\132\52\0\1\133\3\0\1\134"+
    "\70\0\1\135\27\0\1\42\1\0\1\42\7\0\1\136"+
    "\56\0\1\137\1\140\1\137\62\0\1\140\15\0\1\141"+
    "\56\0\1\52\1\0\1\52\142\0\1\142\67\0\1\143"+
    "\72\0\1\144\64\0\1\145\77\0\1\146\51\0\1\147"+
    "\27\0\1\150\1\151\1\150\62\0\1\151\60\0\1\152"+
    "\50\0\1\153\74\0\1\154\27\0\1\71\1\0\1\71"+
    "\7\0\1\155\66\0\2\75\1\0\1\75\2\0\13\75"+
    "\3\0\30\75\15\0\2\76\1\0\1\76\2\0\13\76"+
    "\3\0\30\76\16\0\1\156\1\0\1\157\61\0\1\106"+
    "\3\0\2\106\1\0\1\106\2\0\13\106\3\0\30\106"+
    "\11\0\1\110\3\0\2\110\1\0\1\110\2\0\13\110"+
    "\3\0\30\110\17\0\1\160\132\0\1\161\70\0\1\162"+
    "\73\0\1\163\64\0\1\164\74\0\1\165\72\0\1\166"+
    "\54\0\1\167\70\0\1\170\103\0\1\171\46\0\1\172"+
    "\106\0\1\173\66\0\1\174\76\0\1\175\65\0\1\176"+
    "\1\177\70\0\1\200\67\0\1\201\25\0\1\202\55\0"+
    "\2\141\2\0\64\141\47\0\1\203\74\0\1\204\72\0"+
    "\1\205\71\0\1\206\66\0\1\207\74\0\1\210\65\0"+
    "\1\211\66\0\1\212\74\0\1\213\25\0\1\214\71\0"+
    "\1\215\54\0\2\160\2\0\64\160\52\0\1\216\61\0"+
    "\1\217\27\0\3\163\61\0\1\220\64\0\1\221\51\0"+
    "\1\222\64\0\1\223\105\0\1\224\70\0\1\225\61\0"+
    "\1\226\75\0\1\227\73\0\1\230\35\0\1\231\1\0"+
    "\1\232\123\0\1\233\56\0\1\234\74\0\1\235\100\0"+
    "\1\236\67\0\1\237\11\0\2\202\2\0\64\202\56\0"+
    "\1\240\74\0\1\241\60\0\1\242\77\0\1\243\70\0"+
    "\1\244\71\0\1\245\51\0\1\246\105\0\1\247\11\0"+
    "\2\214\2\0\64\214\1\0\2\250\2\0\10\250\1\251"+
    "\53\250\47\0\1\252\15\0\1\253\57\0\1\254\15\0"+
    "\67\255\1\0\1\255\55\0\1\256\64\0\1\257\62\0"+
    "\1\260\75\0\1\261\66\0\1\262\70\0\1\263\101\0"+
    "\1\264\52\0\1\265\100\0\1\266\57\0\1\267\72\0"+
    "\1\270\105\0\1\271\12\0\3\236\61\0\1\272\51\0"+
    "\1\273\70\0\1\274\77\0\1\275\55\0\1\276\74\0"+
    "\1\277\41\0\1\300\1\0\1\57\2\0\1\301\121\0"+
    "\1\302\30\0\1\303\121\0\1\304\33\0\2\305\1\0"+
    "\1\306\2\0\13\305\4\0\27\305\4\0\2\250\2\0"+
    "\5\250\2\307\1\250\1\251\2\250\13\307\4\250\27\307"+
    "\3\250\41\0\1\310\105\0\1\311\54\0\1\312\27\0"+
    "\67\255\1\313\1\255\51\0\1\314\102\0\1\315\6\0"+
    "\3\316\25\0\1\317\33\0\1\320\56\0\1\321\74\0"+
    "\1\322\57\0\1\323\64\0\1\324\107\0\1\325\51\0"+
    "\1\326\106\0\1\327\10\0\2\271\2\0\61\271\1\330"+
    "\2\271\1\0\67\331\1\0\1\331\54\0\1\332\65\0"+
    "\1\333\34\0\1\334\125\0\1\335\70\0\1\333\72\0"+
    "\1\336\75\0\1\337\24\0\1\340\127\0\1\341\25\0"+
    "\2\305\1\0\1\305\2\0\13\305\4\0\27\305\4\0"+
    "\2\342\2\0\5\342\2\305\1\342\1\306\2\342\13\305"+
    "\4\342\27\305\3\342\37\0\1\343\103\0\1\344\61\0"+
    "\1\345\74\0\1\346\23\0\3\315\61\0\1\347\4\0"+
    "\3\316\61\0\1\320\51\0\1\350\101\0\1\351\56\0"+
    "\1\352\103\0\1\353\11\0\3\354\14\0\1\355\44\0"+
    "\1\356\47\0\1\357\43\0\1\360\5\0\1\361\62\0"+
    "\1\360\51\0\2\362\2\363\63\362\1\271\1\363\67\331"+
    "\1\364\1\331\53\0\1\365\57\0\1\366\70\0\1\367"+
    "\100\0\1\370\71\0\1\371\70\0\1\372\75\0\1\373"+
    "\71\0\1\374\62\0\1\375\64\0\1\376\21\0\67\377"+
    "\1\0\1\377\55\0\1\u0100\14\0\3\351\61\0\1\u0101"+
    "\26\0\1\u0102\121\0\1\u0103\15\0\3\354\61\0\1\356"+
    "\57\0\1\u0104\14\0\67\u0105\1\0\1\u0105\46\0\1\u0106"+
    "\76\0\1\u0107\56\0\1\u0108\26\0\2\362\2\363\63\362"+
    "\1\u0109\70\363\1\u010a\1\363\17\0\1\u010b\2\0\1\u010c"+
    "\121\0\1\u010d\72\0\1\u010e\73\0\1\u010f\25\0\1\u0110"+
    "\121\0\1\u0111\66\0\1\u0112\64\0\1\u0113\31\0\3\376"+
    "\61\0\1\u0114\3\0\67\377\1\u0115\1\377\1\0\3\u0100"+
    "\61\0\1\u0116\3\0\67\u0117\1\0\1\u0117\51\0\1\u0118"+
    "\75\0\1\u0119\70\0\1\u011a\12\0\67\u0105\1\u011b\1\u0105"+
    "\53\0\1\u011c\67\0\1\u011d\76\0\1\u011e\61\0\1\u011f"+
    "\72\0\1\u0120\75\0\1\u0121\56\0\1\u0122\70\0\1\u0123"+
    "\76\0\1\u0124\62\0\1\u0125\70\0\1\u0126\22\0\67\u0127"+
    "\1\0\1\u0127\67\u0128\1\0\1\u0128\67\u0117\1\u0129\1\u0117"+
    "\61\0\1\u012a\55\0\1\u012b\51\0\1\u012c\71\0\1\u012d"+
    "\115\0\1\u012e\72\0\1\u012f\47\0\1\u0130\103\0\1\u0131"+
    "\55\0\1\u0132\103\0\1\u0133\71\0\1\u0133\71\0\1\u0134"+
    "\70\0\1\u0135\57\0\1\u0136\26\0\67\u0127\1\u0137\1\u0127"+
    "\67\u0128\1\u0138\1\u0128\44\0\1\u0139\66\0\1\u013a\74\0"+
    "\1\u013b\64\0\1\u013c\64\0\1\u013d\111\0\1\u013e\75\0"+
    "\1\203\64\0\1\u013f\52\0\1\u0140\27\0\3\u0134\61\0"+
    "\1\u0141\20\0\1\u0142\132\0\1\u0143\57\0\1\u0144\101\0"+
    "\1\u0145\37\0\1\u0146\120\0\1\u0147\72\0\1\u0148\67\0"+
    "\1\u0149\57\0\1\u014a\22\0\67\u014b\1\0\1\u014b\53\0"+
    "\1\351\16\0\3\u0145\61\0\1\u014c\45\0\1\u014d\74\0"+
    "\1\u014e\70\0\1\u014f\77\0\1\u0150\67\0\1\u0151\14\0"+
    "\67\u014b\1\u0152\1\u014b\67\u0153\1\0\1\u0153\57\0\1\u0154"+
    "\54\0\1\u0155\64\0\1\u0156\67\0\1\u0157\105\0\1\203"+
    "\15\0\67\u0153\1\u0158\1\u0153\60\0\1\u0159\56\0\1\u015a"+
    "\70\0\1\u015b\102\0\1\u015c\12\0\1\u015d\63\0\1\u015d"+
    "\61\0\1\354\53\0\1\u015e\77\0\1\u015f\64\0\1\203"+
    "\112\0\1\u0158\57\0\1\351\60\0\1\u0160\102\0\1\u0161"+
    "\74\0\1\u0142\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[16815];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\1\11\1\1\1\11\1\1\1\11\14\1\3\11"+
    "\1\1\4\11\2\1\1\11\1\1\1\11\6\0\2\11"+
    "\6\1\3\11\2\1\2\11\1\1\4\11\1\1\1\11"+
    "\1\1\3\11\1\0\1\11\22\0\1\11\1\1\7\0"+
    "\1\11\6\0\1\1\21\0\1\1\1\11\10\0\2\1"+
    "\5\0\1\1\1\0\1\11\23\0\1\1\4\0\1\11"+
    "\24\0\1\11\1\0\3\1\3\0\1\11\4\0\1\11"+
    "\13\0\1\11\3\0\1\11\23\0\2\11\1\1\22\0"+
    "\1\1\1\11\5\0\1\11\4\0\1\11\5\0\1\11"+
    "\15\0\1\11\5\0\1\11\7\0\2\11\11\0\2\11"+
    "\16\0\1\11\5\0\1\1\11\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  public BuildGradleLexer() {
    this((java.io.Reader)null);
  }
  private int  genericBracketsCounter = 0;
  private int dependenciesBracketsCounter = 0;
  private boolean DependenciesStarted = false;
  private boolean secondEnclosingSignForMap = false;

  private void checkIfReturnToMapDependency() {
      if(secondEnclosingSignForMap) {
          secondEnclosingSignForMap = false;
          yybegin(MAP_DEPENDENCY);
        }
      else {
           secondEnclosingSignForMap = true;
        }
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BuildGradleLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(YYINITIAL); return BAD_CHARACTER;
            }
          // fall through
          case 65: break;
          case 2:
            { return SPACE_CHARACTER;
            }
          // fall through
          case 66: break;
          case 3:
            { return CRLF;
            }
          // fall through
          case 67: break;
          case 4:
            { return BACKSLASH;
            }
          // fall through
          case 68: break;
          case 5:
            { return RSBRACE;
            }
          // fall through
          case 69: break;
          case 6:
            { return LCURBRACE;
            }
          // fall through
          case 70: break;
          case 7:
            { return RCURBRACE;
            }
          // fall through
          case 71: break;
          case 8:
            { return BAD_CHARACTER;
            }
          // fall through
          case 72: break;
          case 9:
            { yybegin(HANDLE_DEPENDENCIES); return CRLF;
            }
          // fall through
          case 73: break;
          case 10:
            { yybegin(EXTRACT_GROUP_STRING);
            }
          // fall through
          case 74: break;
          case 11:
            { return LPARENTHESIS;
            }
          // fall through
          case 75: break;
          case 12:
            { return RPARENTHESIS;
            }
          // fall through
          case 76: break;
          case 13:
            { return LSBRACE;
            }
          // fall through
          case 77: break;
          case 14:
            { yybegin(STRING_DEPENDENCY); yypushback(yylength());
            }
          // fall through
          case 78: break;
          case 15:
            { dependenciesBracketsCounter++ ; return LCURBRACE;
            }
          // fall through
          case 79: break;
          case 16:
            { if(--dependenciesBracketsCounter == 0) {
                                    yybegin(YYINITIAL);}  return RCURBRACE;
            }
          // fall through
          case 80: break;
          case 17:
            { return QUATATION_MARK;
            }
          // fall through
          case 81: break;
          case 18:
            { return APOSTROPHE;
            }
          // fall through
          case 82: break;
          case 19:
            { yybegin(MAP_DEPENDENCY); return COMMA;
            }
          // fall through
          case 83: break;
          case 20:
            { return GROUP_ID;
            }
          // fall through
          case 84: break;
          case 21:
            { return ARTIFACT_ID;
            }
          // fall through
          case 85: break;
          case 22:
            { this.checkIfReturnToMapDependency(); return QUATATION_MARK;
            }
          // fall through
          case 86: break;
          case 23:
            { this.checkIfReturnToMapDependency(); return APOSTROPHE;
            }
          // fall through
          case 87: break;
          case 24:
            { yybegin(EXTRACT_ARTIFACT_STRING); return COLON;
            }
          // fall through
          case 88: break;
          case 25:
            { yybegin(EXTRACT_VERSION_STRING); return COLON;
            }
          // fall through
          case 89: break;
          case 26:
            { yybegin(STRING_DEPENDENCY); return QUATATION_MARK;
            }
          // fall through
          case 90: break;
          case 27:
            { yybegin(STRING_DEPENDENCY);  return APOSTROPHE;
            }
          // fall through
          case 91: break;
          case 28:
            { yybegin(YYINITIAL); return ROOT_GROUP_VERSION_VALUE;
            }
          // fall through
          case 92: break;
          case 29:
            { return EQUALS;
            }
          // fall through
          case 93: break;
          case 30:
            { yybegin(YYINITIAL); return ROOT_GENERIC_VALUE;
            }
          // fall through
          case 94: break;
          case 31:
            { return JLINK_COMPONENT;
            }
          // fall through
          case 95: break;
          case 32:
            { genericBracketsCounter++ ; return LCURBRACE;
            }
          // fall through
          case 96: break;
          case 33:
            { if (--genericBracketsCounter == 0) {
                                     yybegin(YYINITIAL);} return RCURBRACE;
            }
          // fall through
          case 97: break;
          case 34:
            { 
            }
          // fall through
          case 98: break;
          case 35:
            { yybegin(STRING_DEPENDENCY);
            }
          // fall through
          case 99: break;
          case 36:
            { yybegin(HANDLE_DEPENDENCIES); return COMMENT;
            }
          // fall through
          case 100: break;
          case 37:
            { yybegin(MAP_DEPENDENCY);
            }
          // fall through
          case 101: break;
          case 38:
            { return LINE_COMMENT;
            }
          // fall through
          case 102: break;
          case 39:
            { yybegin(HANDLE_DEPENDENCIES); return LINE_COMMENT;
            }
          // fall through
          case 103: break;
          case 40:
            { return CONFIG_NAME;
            }
          // fall through
          case 104: break;
          case 41:
            { yybegin(YYINITIAL); return LINE_COMMENT;
            }
          // fall through
          case 105: break;
          case 42:
            { return VERSION;
            }
          // fall through
          case 106: break;
          case 43:
            { return JAVA;
            }
          // fall through
          case 107: break;
          case 44:
            { return MAIN;
            }
          // fall through
          case 108: break;
          case 45:
            { yybegin(GET_ROOT_VALUES); return ROOT_GROUP_KEY;
            }
          // fall through
          case 109: break;
          case 46:
            { yybegin(HANDLE_ARTIFACT); return NAME_KEY;
            }
          // fall through
          case 110: break;
          case 47:
            { return EXT;
            }
          // fall through
          case 111: break;
          case 48:
            { yybegin(BYPASS_UNNECESSARY_BLOCK); genericBracketsCounter++; return JLINK_START;
            }
          // fall through
          case 112: break;
          case 49:
            { yybegin(MAP_DEPENDENCY); yypushback(yylength());
            }
          // fall through
          case 113: break;
          case 50:
            { yybegin(HANDLE_GROUP);  return GROUP_KEY;
            }
          // fall through
          case 114: break;
          case 51:
            { return TEST;
            }
          // fall through
          case 115: break;
          case 52:
            { yybegin(GET_ROOT_VALUES); return ROOT_VERSION_KEY;
            }
          // fall through
          case 116: break;
          case 53:
            { return TASKS;
            }
          // fall through
          case 117: break;
          case 54:
            { yybegin(HANDLE_VERSION); return VERSION_KEY;
            }
          // fall through
          case 118: break;
          case 55:
            { return JAVAFX;
            }
          // fall through
          case 119: break;
          case 56:
            { return RUNIDE;
            }
          // fall through
          case 120: break;
          case 57:
            { return PLUGINS;
            }
          // fall through
          case 121: break;
          case 58:
            { return SOURCE_SETS;
            }
          // fall through
          case 122: break;
          case 59:
            { return INTELLIJ;
            }
          // fall through
          case 123: break;
          case 60:
            { return JLINKZIP;
            }
          // fall through
          case 124: break;
          case 61:
            { yybegin(GET_GENERIC_VALUES); return ROOT_GENERIC_KEY;
            }
          // fall through
          case 125: break;
          case 62:
            { yybegin(HANDLE_DEPENDENCIES); return DEPENDENCIES;
            }
          // fall through
          case 126: break;
          case 63:
            { return APPLICATION;
            }
          // fall through
          case 127: break;
          case 64:
            { return REPOSITORIES;
            }
          // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
