{
  parserClass="org.jboss.tools.intellij.componentanalysis.gradle.build.parser.BuildGradleParser"
  parserUtilClass="com.intellij.lang.parser.GeneratedParserUtilBase"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix=""
  psiImplClassSuffix="Impl"
  psiPackage="org.jboss.tools.intellij.componentanalysis.gradle.build.psi"
  psiImplPackage="org.jboss.tools.intellij.componentanalysis.gradle.build.psi.impl"

  elementTypeHolderClass="org.jboss.tools.intellij.componentanalysis.gradle.build.psi.BuildGradleTypes"
  elementTypeClass="org.jboss.tools.intellij.componentanalysis.gradle.build.psi.BuildGradleElementType"
  tokenTypeClass="org.jboss.tools.intellij.componentanalysis.gradle.build.psi.BuildGradleTokenType"


tokens=[
PLUGINS="regexp:^plugins\s*\{"
ID_PREFIX = "regexp:^\s*id.*"
DEPENDENCIES="dependencies"
TEST="test"
REPOSITORIES="repositories"
SOURCE_SETS="sourceSets"
MAIN="main"
JAVA="java"
CRLF="regexp:[\n|\rn]"
SPACE_CHARACTER="regexp:\s*"
WHITE_SPACE="regexp:[^\s\r\n]+"
BACKSLASH="\\"
COMMA=","
COLON=":"
QUATATION_MARK="\""
APOSTROPHE = "'"
LSBRACE="["
RSBRACE="]"
LCURBRACE="{"
RCURBRACE="regexp:\s*}"
LPARENTHESIS = "("
RPARENTHESIS = ")"
COMMENT="regexp:.*//.*"
LINE_COMMENT="regexp:\s*//.*"
CONFIG_NAME="regexp:implementation|api|compile|compileClasspath|compileOnly|runtime|runtimeClasspath|runtimeOnly"
//ENCLOSING_SIGNS= "regexp:[\"']*"
GROUP_ID="regexp:[a-z0-9.'-]+"
ARTIFACT_ID="regexp:[-a-zA-Z0-9_.]+"
VERSION="regexp:[0-9]+[.][0-9]+(.[0-9]+)?(.[-a-zA-Z0-9.])?"
]
}


file ::= line*

private line ::= artifact | comment | CRLF| SPACE_CHARACTER | others

private others::= PLUGINS | root_version | root_group  | root_generic_key | LCURBRACE | RCURBRACE | DEPENDENCIES | REPOSITORIES | ID_PREFIX | TEST | SOURCE_SETS | MAIN | JAVA | EXT | APPLICATION | JAVAFX | JLINK_START | jlink_components | JLINKZIP | INTELLIJ | RUNIDE | TASKS

private jlink_components::= ((JLINK_COMPONENT)+ ((LCURBRACE) (JLINK_COMPONENT)+ (RCURBRACE) (JLINK_COMPONENT)*)* (JLINK_COMPONENT)* (LCURBRACE|RCURBRACE)* CRLF)
private root_generic_key::= ROOT_GENERIC_KEY (SPACE_CHARACTER* EQUALS SPACE_CHARACTER*|SPACE_CHARACTER) ROOT_GENERIC_VALUE { pin=1}
private root_version::= ROOT_VERSION_KEY (SPACE_CHARACTER* EQUALS SPACE_CHARACTER*|SPACE_CHARACTER) ROOT_GROUP_VERSION_VALUE { pin=1}
private root_group::= ROOT_GROUP_KEY (SPACE_CHARACTER* EQUALS SPACE_CHARACTER*|SPACE_CHARACTER) ROOT_GROUP_VERSION_VALUE { pin=1}

artifact ::= (CONFIG_NAME)? (string_notation | map_notation ) (comment)? {pin=2}
private string_notation ::= (SPACE_CHARACTER | LPARENTHESIS)? (gav_colon) {pin=2}
private gav_colon ::= (APOSTROPHE|QUATATION_MARK)? group ":" artifact_id ":" version (APOSTROPHE|QUATATION_MARK)?

group ::= GROUP_ID

artifact_id ::= ARTIFACT_ID

version ::= VERSION

private map_notation ::= (SPACE_CHARACTER | LPARENTHESIS)? (SPACE_CHARACTER)? (COMMA|LCURBRACE)?  (gav_map)  (WHITE_SPACE | RPARENTHESIS)? { pin= 4}

private gav_map ::= group_map (SPACE_CHARACTER)* COMMA (SPACE_CHARACTER)* artifact_map (SPACE_CHARACTER)* COMMA (SPACE_CHARACTER)* version_map

private group_map ::= GROUP_KEY (SPACE_CHARACTER)*  (APOSTROPHE|QUATATION_MARK) group (APOSTROPHE|QUATATION_MARK)
private artifact_map ::= NAME_KEY (SPACE_CHARACTER)* (APOSTROPHE|QUATATION_MARK) artifact_id (APOSTROPHE|QUATATION_MARK)
private version_map ::= VERSION_KEY (SPACE_CHARACTER)* (APOSTROPHE|QUATATION_MARK) version (APOSTROPHE|QUATATION_MARK)

comment ::= LINE_COMMENT|COMMENT
